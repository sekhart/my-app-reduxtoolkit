{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  comments: []\n};\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    getComments: state => {\n      state.loading = true;\n    },\n    getCommentsSuccess: (state, {\n      payload\n    }) => {\n      state.comments = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getCommentsFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // Three actions generated from the slice\n\nexport const {\n  getComments,\n  getCommentsSuccess,\n  getCommentsFailure\n} = commentsSlice.actions; // A selector\n\nexport const commentsSelector = state => state.comments; // The reducer\n\nexport default commentsSlice.reducer; // Asynchronous thunk action\n\nexport function fetchComments(post_id) {\n  return async dispatch => {\n    dispatch(getComments());\n\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${post_id}`);\n      const data = await response.json();\n      console.log(\"fetched Comments:---\" + data);\n      dispatch(getCommentsSuccess(data.json()));\n    } catch (error) {\n      dispatch(getCommentsFailure());\n    }\n  };\n}","map":{"version":3,"sources":["C:/MY/React-Apps/my-app-reduxtoolkit/src/slices/comments.js"],"names":["createSlice","initialState","loading","hasErrors","comments","commentsSlice","name","reducers","getComments","state","getCommentsSuccess","payload","getCommentsFailure","actions","commentsSelector","reducer","fetchComments","post_id","dispatch","response","fetch","data","json","console","log","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,SAAS,EAAE,KAFe;AAG1BC,EAAAA,QAAQ,EAAE;AAHgB,CAArB;AAMP,MAAMC,aAAa,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,UAD0B;AAEhCL,EAAAA,YAFgC;AAGhCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAEC,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRQ,IAAAA,kBAAkB,EAAE,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AAC1CF,MAAAA,KAAK,CAACL,QAAN,GAAiBO,OAAjB;AACAF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACD,KARO;AASRS,IAAAA,kBAAkB,EAAEH,KAAK,IAAI;AAC3BA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD;AAZO;AAHsB,CAAD,CAAjC,C,CAmBA;;AACA,OAAO,MAAM;AACXK,EAAAA,WADW;AAEXE,EAAAA,kBAFW;AAGXE,EAAAA;AAHW,IAITP,aAAa,CAACQ,OAJX,C,CAMP;;AACA,OAAO,MAAMC,gBAAgB,GAAGL,KAAK,IAAIA,KAAK,CAACL,QAAxC,C,CAEP;;AACA,eAAeC,aAAa,CAACU,OAA7B,C,CAEA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AACrC,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACV,WAAW,EAAZ,CAAR;;AAEA,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMC,KAAK,CACzB,iDAAgDH,OAAQ,EAD/B,CAA5B;AAGA,YAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBH,IAArC;AACAH,MAAAA,QAAQ,CAACR,kBAAkB,CAACW,IAAI,CAACC,IAAL,EAAD,CAAnB,CAAR;AACD,KAPD,CAOE,OAAOG,KAAP,EAAc;AACdP,MAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AACD;AACF,GAbD;AAcD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  hasErrors: false,\r\n  comments: [],\r\n};\r\n\r\nconst commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {\r\n    getComments: state => {\r\n      state.loading = true;\r\n    },\r\n    getCommentsSuccess: (state, { payload }) => {\r\n      state.comments = payload;\r\n      state.loading = false;\r\n      state.hasErrors = false;\r\n    },\r\n    getCommentsFailure: state => {\r\n      state.loading = false;\r\n      state.hasErrors = true;\r\n    }\r\n  }\r\n});\r\n\r\n// Three actions generated from the slice\r\nexport const {\r\n  getComments,\r\n  getCommentsSuccess,\r\n  getCommentsFailure\r\n} = commentsSlice.actions;\r\n\r\n// A selector\r\nexport const commentsSelector = state => state.comments;\r\n\r\n// The reducer\r\nexport default commentsSlice.reducer;\r\n\r\n// Asynchronous thunk action\r\nexport function fetchComments(post_id) {\r\n  return async dispatch => {\r\n    dispatch(getComments());\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/comments/${post_id}`\r\n      );\r\n      const data = await response.json();\r\n      console.log(\"fetched Comments:---\" + data);\r\n      dispatch(getCommentsSuccess(data.json()));\r\n    } catch (error) {\r\n      dispatch(getCommentsFailure());\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}