{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // createSlice for users with our reducers\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    users: [],\n    loading: false,\n    hasErrors: false\n  },\n  reducers: {\n    getUsers: state => {\n      state.loading = true;\n    },\n    getUsersSuccess: (state, {\n      payload\n    }) => {\n      state.users = payload, state.loading = false, state.hasErrors = false;\n    },\n    getUsersFailure: state => {\n      state.loading = false, state.hasErrors = true;\n    }\n  }\n}); // export actions generated by slice\n\nexport const {\n  getUsers,\n  getUsersSuccess,\n  getUsersFailure\n} = usersSlice.actions; // export users selector\n\nexport const usersSelector = state => state.users; // export default reducer\n\nexport default userSlice.reducer; // fetch Users function for Asynchronous Thunk action\n\nexport function fetchUsers() {\n  return async dispatch => {\n    dispatch(getUsers());\n\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      const data = await response.json();\n      dispatch(getUsersSuccess(data));\n    } catch (error) {\n      dispatch(getUsersFailure());\n    }\n  };\n}","map":{"version":3,"sources":["C:/MY/React-Apps/my-app-reduxtoolkit/src/slices/users.js"],"names":["createSlice","usersSlice","name","initialState","users","loading","hasErrors","reducers","getUsers","state","getUsersSuccess","payload","getUsersFailure","actions","usersSelector","userSlice","reducer","fetchUsers","dispatch","response","fetch","data","json","error"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B,C,CAEA;;AACA,MAAMC,UAAU,GAAGD,WAAW,CAAC;AAC3BE,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,OAAO,EAAE,KAFC;AAGVC,IAAAA,SAAS,EAAE;AAHD,GAFa;AAO3BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAEC,KAAK,IAAI;AACfA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHK;AAINK,IAAAA,eAAe,EAAE,CAACD,KAAD,EAAQ;AAACE,MAAAA;AAAD,KAAR,KAAsB;AACnCF,MAAAA,KAAK,CAACL,KAAN,GAAcO,OAAd,EACAF,KAAK,CAACJ,OAAN,GAAgB,KADhB,EAEAI,KAAK,CAACH,SAAN,GAAkB,KAFlB;AAGH,KARK;AASNM,IAAAA,eAAe,EAAEH,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB,EACAI,KAAK,CAACH,SAAN,GAAkB,IADlB;AAEH;AAZK;AAPiB,CAAD,CAA9B,C,CAuBA;;AACA,OAAO,MAAM;AAACE,EAAAA,QAAD;AAAWE,EAAAA,eAAX;AAA4BE,EAAAA;AAA5B,IAA+CX,UAAU,CAACY,OAAhE,C,CAEP;;AACA,OAAO,MAAMC,aAAa,GAAGL,KAAK,IAAIA,KAAK,CAACL,KAArC,C,CAEP;;AACA,eAAeW,SAAS,CAACC,OAAzB,C,CAEA;;AACA,OAAO,SAASC,UAAT,GAAsB;AACzB,SAAO,MAAMC,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAACV,QAAQ,EAAT,CAAR;;AAEA,QAAI;AACA,YAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,MAAAA,QAAQ,CAACR,eAAe,CAACW,IAAD,CAAhB,CAAR;AAEH,KAND,CAMC,OAAME,KAAN,EAAY;AACTL,MAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACH;AACJ,GAZD;AAaH","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\n\r\n// createSlice for users with our reducers\r\nconst usersSlice = createSlice({\r\n    name: \"users\",\r\n    initialState: {\r\n        users: [],\r\n        loading: false,\r\n        hasErrors: false,\r\n    },\r\n    reducers: {\r\n        getUsers: state => {\r\n            state.loading = true\r\n        },\r\n        getUsersSuccess: (state, {payload}) => {\r\n            state.users = payload,\r\n            state.loading = false,\r\n            state.hasErrors = false\r\n        },\r\n        getUsersFailure: state => {\r\n            state.loading = false,\r\n            state.hasErrors = true\r\n        },\r\n    }\r\n})\r\n\r\n// export actions generated by slice\r\nexport const {getUsers, getUsersSuccess, getUsersFailure} = usersSlice.actions\r\n\r\n// export users selector\r\nexport const usersSelector = state => state.users\r\n\r\n// export default reducer\r\nexport default userSlice.reducer\r\n\r\n// fetch Users function for Asynchronous Thunk action\r\nexport function fetchUsers() {\r\n    return async dispatch => {\r\n        dispatch(getUsers())\r\n\r\n        try {\r\n            const response = await fetch('https://jsonplaceholder.typicode.com/users')\r\n            const data = await response.json()\r\n\r\n            dispatch(getUsersSuccess(data))\r\n\r\n        }catch(error){\r\n            dispatch(getUsersFailure())\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}