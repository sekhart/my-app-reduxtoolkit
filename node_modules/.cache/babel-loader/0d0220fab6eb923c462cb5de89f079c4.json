{"ast":null,"code":"var _jsxFileName = \"C:\\\\MY\\\\React-Apps\\\\my-app-reduxtoolkit\\\\src\\\\pages\\\\PostsPage.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPosts, postsSelector } from \"../slices/posts\";\nimport { Post } from \"../components/Post\";\n\nconst PostsPage = () => {\n  const dispatch = useDispatch();\n  const {\n    post,\n    loading,\n    hasErrors\n  } = useSelector(postsSelector);\n  console.log(\"loading: 1---\" + loading);\n  console.log(\"hasErrors: 1---\" + hasErrors);\n  console.log(\"posts: 1---\" + posts);\n  useEffect(() => {\n    dispatch(fetchPosts());\n  }, [dispatch]);\n\n  const renderPosts = () => {\n    console.log(\"loading:---\" + loading);\n    console.log(\"hasErrors:---\" + hasErrors);\n    console.log(\"posts:---\" + posts);\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Loading posts...\");\n    if (hasErrors) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Unable to display posts.\");\n    return posts.map(post => React.createElement(Post, {\n      key: post.id,\n      post: post,\n      excerpt: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Posts\"), renderPosts());\n};\n\nexport default PostsPage;","map":{"version":3,"sources":["C:/MY/React-Apps/my-app-reduxtoolkit/src/pages/PostsPage.js"],"names":["React","useEffect","useDispatch","useSelector","fetchPosts","postsSelector","Post","PostsPage","dispatch","post","loading","hasErrors","console","log","posts","renderPosts","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,iBAA1C;AAEA,SAASC,IAAT,QAAqB,oBAArB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA+BR,WAAW,CAACE,aAAD,CAAhD;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBH,OAA9B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBF,SAAhC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBC,KAA5B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACD,GAFQ,EAEN,CAACI,QAAD,CAFM,CAAT;;AAIA,QAAMO,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBH,OAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBF,SAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,KAA1B;AAEA,QAAIJ,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACb,QAAIC,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAEf,WAAOG,KAAK,CAACE,GAAN,CAAUP,IAAI,IAAI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACQ,EAAhB;AAAoB,MAAA,IAAI,EAAER,IAA1B;AAAgC,MAAA,OAAO,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB,CAAP;AACD,GATD;;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGM,WAAW,EAFd,CADF;AAMD,CA7BD;;AA+BA,eAAeR,SAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { fetchPosts, postsSelector } from \"../slices/posts\";\r\n\r\nimport { Post } from \"../components/Post\";\r\n\r\nconst PostsPage = () => {\r\n  const dispatch = useDispatch();\r\n  const { post, loading, hasErrors } = useSelector(postsSelector);\r\n\r\n  console.log(\"loading: 1---\" + loading);\r\n  console.log(\"hasErrors: 1---\" + hasErrors);\r\n  console.log(\"posts: 1---\" + posts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts());\r\n  }, [dispatch]);\r\n\r\n  const renderPosts = () => {\r\n    console.log(\"loading:---\" + loading);\r\n    console.log(\"hasErrors:---\" + hasErrors);\r\n    console.log(\"posts:---\" + posts);\r\n\r\n    if (loading) return <p>Loading posts...</p>;\r\n    if (hasErrors) return <p>Unable to display posts.</p>;\r\n\r\n    return posts.map(post => <Post key={post.id} post={post} excerpt />);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h1>Posts</h1>\r\n      {renderPosts()}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PostsPage;\r\n"]},"metadata":{},"sourceType":"module"}