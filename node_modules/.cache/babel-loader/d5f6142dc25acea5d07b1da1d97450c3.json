{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // createSlice for users with our reducers\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    users: [],\n    loading: false,\n    hasErrors: false\n  },\n  reducers: {\n    getUsers: state => {\n      state.loading = true;\n    },\n    getUsersSuccess: (state, {\n      payload\n    }) => {\n      state.users = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getUsersFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // export actions generated by slice\n\nexport const {\n  getUsers,\n  getUsersSuccess,\n  getUsersFailure\n} = usersSlice.actions; // export users selector\n\nexport const usersSelector = state => state.users; // export default reducer\n\nexport default usersSlice.reducer; // fetch Users function for Asynchronous Thunk action\n\nexport function fetchUsers() {\n  return async dispatch => {\n    dispatch(getUsers());\n\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const data = await response.json();\n      dispatch(getUsersSuccess(data));\n    } catch (error) {\n      dispatch(getUsersFailure());\n    }\n  };\n}","map":{"version":3,"sources":["C:/MY/React-Apps/my-app-reduxtoolkit/src/slices/users.js"],"names":["createSlice","usersSlice","name","initialState","users","loading","hasErrors","reducers","getUsers","state","getUsersSuccess","payload","getUsersFailure","actions","usersSelector","reducer","fetchUsers","dispatch","response","fetch","data","json","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,MAAMC,UAAU,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,OAAO,EAAE,KAFG;AAGZC,IAAAA,SAAS,EAAE;AAHC,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAEC,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRK,IAAAA,eAAe,EAAE,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AACvCF,MAAAA,KAAK,CAACL,KAAN,GAAcO,OAAd;AACAF,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACD,KARO;AASRM,IAAAA,eAAe,EAAEH,KAAK,IAAI;AACxBA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACD;AAZO;AAPmB,CAAD,CAA9B,C,CAuBA;;AACA,OAAO,MAAM;AACXE,EAAAA,QADW;AAEXE,EAAAA,eAFW;AAGXE,EAAAA;AAHW,IAITX,UAAU,CAACY,OAJR,C,CAMP;;AACA,OAAO,MAAMC,aAAa,GAAGL,KAAK,IAAIA,KAAK,CAACL,KAArC,C,CAEP;;AACA,eAAeH,UAAU,CAACc,OAA1B,C,CAEA;;AACA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACT,QAAQ,EAAT,CAAR;;AAEA,QAAI;AACF,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4CAD0B,CAA5B;AAGA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,MAAAA,QAAQ,CAACP,eAAe,CAACU,IAAD,CAAhB,CAAR;AACD,KAPD,CAOE,OAAOE,KAAP,EAAc;AACdL,MAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACD;AACF,GAbD;AAcD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// createSlice for users with our reducers\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState: {\r\n    users: [],\r\n    loading: false,\r\n    hasErrors: false\r\n  },\r\n  reducers: {\r\n    getUsers: state => {\r\n      state.loading = true;\r\n    },\r\n    getUsersSuccess: (state, { payload }) => {\r\n      state.users = payload;\r\n      state.loading = false;\r\n      state.hasErrors = false;\r\n    },\r\n    getUsersFailure: state => {\r\n      state.loading = false;\r\n      state.hasErrors = true;\r\n    }\r\n  }\r\n});\r\n\r\n// export actions generated by slice\r\nexport const {\r\n  getUsers,\r\n  getUsersSuccess,\r\n  getUsersFailure\r\n} = usersSlice.actions;\r\n\r\n// export users selector\r\nexport const usersSelector = state => state.users;\r\n\r\n// export default reducer\r\nexport default usersSlice.reducer;\r\n\r\n// fetch Users function for Asynchronous Thunk action\r\nexport function fetchUsers() {\r\n  return async dispatch => {\r\n    dispatch(getUsers());\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"https://jsonplaceholder.typicode.com/users\"\r\n      );\r\n      const data = await response.json();\r\n\r\n      dispatch(getUsersSuccess(data));\r\n    } catch (error) {\r\n      dispatch(getUsersFailure());\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}