{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  post: {}\n};\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    getPost: state => {\n      state.loading = true;\n    },\n    getPostSuccess: (state, {\n      payload\n    }) => {\n      state.post = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getPostFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // Three actions generated from the slice\n\nexport const {\n  getPost,\n  getPostSuccess,\n  getPostFailure\n} = postSlice.actions; // A selector\n\nexport const postSelector = state => state.post; // The reducer\n\nexport default postSlice.reducer; // Asynchronous thunk action\n\nexport function fetchPost(id) {\n  return async dispatch => {\n    dispatch(getPost());\n\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);\n      const data = await response.json();\n      dispatch(getPostSuccess(data));\n    } catch (error) {\n      dispatch(getPostFailure());\n    }\n  };\n}","map":{"version":3,"sources":["C:/MY/React-Apps/my-app-reduxtoolkit/src/slices/post.js"],"names":["createSlice","initialState","loading","hasErrors","post","postSlice","name","reducers","getPost","state","getPostSuccess","payload","getPostFailure","actions","postSelector","reducer","fetchPost","id","dispatch","response","fetch","data","json","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,SAAS,EAAE,KAFe;AAG1BC,EAAAA,IAAI,EAAE;AAHoB,CAArB;AAMP,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAEC,KAAK,IAAI;AAChBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRQ,IAAAA,cAAc,EAAE,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AACtCF,MAAAA,KAAK,CAACL,IAAN,GAAaO,OAAb;AACAF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACD,KARO;AASRS,IAAAA,cAAc,EAAEH,KAAK,IAAI;AACvBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD;AAZO;AAHkB,CAAD,CAA7B,C,CAmBA;;AACA,OAAO,MAAM;AAAEK,EAAAA,OAAF;AAAWE,EAAAA,cAAX;AAA2BE,EAAAA;AAA3B,IAA8CP,SAAS,CAACQ,OAA9D,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAGL,KAAK,IAAIA,KAAK,CAACL,IAApC,C,CAEP;;AACA,eAAeC,SAAS,CAACU,OAAzB,C,CAEA;;AACA,OAAO,SAASC,SAAT,CAAmBC,EAAnB,EAAuB;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR;;AAEA,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMC,KAAK,CACzB,8CAA6CH,EAAG,EADvB,CAA5B;AAGA,YAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,MAAAA,QAAQ,CAACR,cAAc,CAACW,IAAD,CAAf,CAAR;AACD,KAPD,CAOE,OAAOE,KAAP,EAAc;AACdL,MAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACD;AACF,GAbD;AAcD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  hasErrors: false,\r\n  post: {}\r\n};\r\n\r\nconst postSlice = createSlice({\r\n  name: \"post\",\r\n  initialState,\r\n  reducers: {\r\n    getPost: state => {\r\n      state.loading = true;\r\n    },\r\n    getPostSuccess: (state, { payload }) => {\r\n      state.post = payload;\r\n      state.loading = false;\r\n      state.hasErrors = false;\r\n    },\r\n    getPostFailure: state => {\r\n      state.loading = false;\r\n      state.hasErrors = true;\r\n    }\r\n  }\r\n});\r\n\r\n// Three actions generated from the slice\r\nexport const { getPost, getPostSuccess, getPostFailure } = postSlice.actions;\r\n\r\n// A selector\r\nexport const postSelector = state => state.post;\r\n\r\n// The reducer\r\nexport default postSlice.reducer;\r\n\r\n// Asynchronous thunk action\r\nexport function fetchPost(id) {\r\n  return async dispatch => {\r\n    dispatch(getPost());\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts/${id}`\r\n      );\r\n      const data = await response.json();\r\n\r\n      dispatch(getPostSuccess(data));\r\n    } catch (error) {\r\n      dispatch(getPostFailure());\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}