{"ast":null,"code":"var _jsxFileName = \"C:\\\\MY\\\\React-Apps\\\\my-app-reduxtoolkit\\\\src\\\\pages\\\\SinglePostPage.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPost, postSelector } from \"../slices/post\";\nimport { fetchComments, commentsSelector } from \"../slices/comments\";\nimport { Post } from \"../components/Post\";\nimport { Comment } from \"../components/Comment\";\n\nconst SinglePostPage = ({\n  match\n}) => {\n  const dispatch = useDispatch();\n  const {\n    post,\n    loading: postLoading,\n    hasErrors: postHasErrors\n  } = useSelector(postSelector);\n  const {\n    comments,\n    loading: commentsLoading,\n    hasErrors: commentsHasErrors\n  } = useSelector(commentsSelector);\n  useEffect(() => {\n    const {\n      id\n    } = match.params;\n    dispatch(fetchPost(id));\n    dispatch(fetchComments(id));\n  }, [dispatch, match]);\n\n  const renderPost = () => {\n    if (postLoading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Loading post...\");\n    if (postHasErrors) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Unable to display post.\");\n    return React.createElement(Post, {\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  };\n\n  const renderComments = () => {\n    if (commentsLoading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Loading comments...\");\n    if (commentsHasErrors) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Unable to display comments.\");\n    console.log(\"comments:---\" + comments);\n\n    if (comments != \"\" && comments.size != 0) {\n      return comments.map(comment => React.createElement(Comment, {\n        key: comment.id,\n        comment: comment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  };\n\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, renderPost(), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Comments\"), renderComments());\n};\n\nexport default SinglePostPage;","map":{"version":3,"sources":["C:/MY/React-Apps/my-app-reduxtoolkit/src/pages/SinglePostPage.js"],"names":["React","useEffect","useDispatch","useSelector","fetchPost","postSelector","fetchComments","commentsSelector","Post","Comment","SinglePostPage","match","dispatch","post","loading","postLoading","hasErrors","postHasErrors","comments","commentsLoading","commentsHasErrors","id","params","renderPost","renderComments","console","log","size","map","comment"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,gBAAxC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,oBAAhD;AAEA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,OAAT,QAAwB,uBAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACpC,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,OAAO,EAAEC,WAAjB;AAA8BC,IAAAA,SAAS,EAAEC;AAAzC,MAA2Dd,WAAW,CAC1EE,YAD0E,CAA5E;AAIA,QAAM;AACJa,IAAAA,QADI;AAEJJ,IAAAA,OAAO,EAAEK,eAFL;AAGJH,IAAAA,SAAS,EAAEI;AAHP,MAIFjB,WAAW,CAACI,gBAAD,CAJf;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEoB,MAAAA;AAAF,QAASV,KAAK,CAACW,MAArB;AACAV,IAAAA,QAAQ,CAACR,SAAS,CAACiB,EAAD,CAAV,CAAR;AACAT,IAAAA,QAAQ,CAACN,aAAa,CAACe,EAAD,CAAd,CAAR;AACD,GAJQ,EAIN,CAACT,QAAD,EAAWD,KAAX,CAJM,CAAT;;AAMA,QAAMY,UAAU,GAAG,MAAM;AACvB,QAAIR,WAAJ,EAAiB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AACjB,QAAIE,aAAJ,EAAmB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AAEnB,WAAO,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEJ,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GALD;;AAOA,QAAMW,cAAc,GAAG,MAAM;AAC3B,QAAIL,eAAJ,EAAqB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACrB,QAAIC,iBAAJ,EAAuB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACvBK,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBR,QAA7B;;AACA,QAAIA,QAAQ,IAAI,EAAZ,IAAkBA,QAAQ,CAACS,IAAT,IAAiB,CAAvC,EAA0C;AACxC,aAAOT,QAAQ,CAACU,GAAT,CAAaC,OAAO,IACzB,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,OAAO,CAACR,EAAtB;AAA0B,QAAA,OAAO,EAAEQ,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAP;AAGD;AACF,GATD;;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,UAAU,EADb,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGGC,cAAc,EAHjB,CADF;AAOD,CA3CD;;AA6CA,eAAed,cAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { fetchPost, postSelector } from \"../slices/post\";\r\nimport { fetchComments, commentsSelector } from \"../slices/comments\";\r\n\r\nimport { Post } from \"../components/Post\";\r\nimport { Comment } from \"../components/Comment\";\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const { post, loading: postLoading, hasErrors: postHasErrors } = useSelector(\r\n    postSelector\r\n  );\r\n\r\n  const {\r\n    comments,\r\n    loading: commentsLoading,\r\n    hasErrors: commentsHasErrors\r\n  } = useSelector(commentsSelector);\r\n\r\n  useEffect(() => {\r\n    const { id } = match.params;\r\n    dispatch(fetchPost(id));\r\n    dispatch(fetchComments(id));\r\n  }, [dispatch, match]);\r\n\r\n  const renderPost = () => {\r\n    if (postLoading) return <p>Loading post...</p>;\r\n    if (postHasErrors) return <p>Unable to display post.</p>;\r\n\r\n    return <Post post={post} />;\r\n  };\r\n\r\n  const renderComments = () => {\r\n    if (commentsLoading) return <p>Loading comments...</p>;\r\n    if (commentsHasErrors) return <p>Unable to display comments.</p>;\r\n    console.log(\"comments:---\" + comments);\r\n    if (comments != \"\" && comments.size != 0) {\r\n      return comments.map(comment => (\r\n        <Comment key={comment.id} comment={comment} />\r\n      ));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      {renderPost()}\r\n      <h2>Comments</h2>\r\n      {renderComments()}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SinglePostPage;\r\n"]},"metadata":{},"sourceType":"module"}