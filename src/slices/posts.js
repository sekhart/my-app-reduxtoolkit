import { createSlice } from "@reduxjs/toolkit";

// declare initialState
export const initialState = {
  loading: false,
  hasErrors: false,
  posts: []
};

// Createing slice for componentSlice
const postsSlice = createSlice({
  name: "posts",
  initialState,
  reducers: {
    getPosts: state => {
      state.loading = true;
    },
    getPostsSuccess: (state, { payload }) => {
      state.posts = payload;
      state.loading = false;
      state.hasErrors = false;
    },
    getPostsFailure: state => {
      state.loading = false;
      state.hasErrors = true;
    }
  }
});

// Actions generated by Slice
export const {
  getPosts,
  getPostsSuccess,
  getPostsFailure
} = postsSlice.actions;

// Selector
export const postsSelector = state => state.posts;

// The reducer
export default postsSlice.reducer;

// Asynchronous Thunk action
export function fetchPosts() {
  return async dispatch => {
    dispatch(getPosts());

    try {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/posts"
      );
      const data = await response.json();

      dispatch(getPostsSuccess(data));
    } catch (error) {
      dispatch(getPostsFailure());
    }
  };
}
